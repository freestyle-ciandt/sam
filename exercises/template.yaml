AWSTemplateFormatVersion: "2010-09-09"
Transform: "AWS::Serverless-2016-10-31"

Description: Template dojo dupla Romulo e Henrique

Resources:
  # ExercisesApi:
  #   Type: AWS::Serverless::Api
  #   Properties:
  #     StageName: Prod
  #     Auth:
  #       ApiKeyRequired: true # sets for all methods
  #       UsagePlan:
  #         CreateUsagePlan: PER_API
  #         Description: Usage plan for the Serverless Api
  #         Quota:
  #           Limit: 5000
  #           Period: MONTH
  #         Tags:
  #           - Key: Name
  #             Value: Exercise01ApiUsagePlan
  #     Models:
  #       ClienteModel:
  #         type: object
  #         required:
  #           - id
  #           - nome
  #           - documento
  #           - cidade
  #           - estado
  #           - pais
  #           - id_plano
  #         properties:
  #           id:
  #             type: integer
  #           nome:
  #             type: string
  #           documento:
  #             type: string
  #           cidade:
  #             type: string
  #           estado:
  #             type: string
  #           pais:
  #             type: string
  #           id_plano:
  #             type: integer
  #     GatewayResponses:
  #       BAD_REQUEST_BODY:
  #         StatusCode: 400
  #         ResponseTemplates:
  #           "application/json": '{"message": "Invalid Input"}'

  # Exercise01Function:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     FunctionName: Exercise-01-function
  #     CodeUri: ./01
  #     Handler: app.lambdaHandler
  #     Runtime: nodejs12.x
  #     Events:
  #       Exercise01Api:
  #         Type: Api
  #         Properties:
  #           RestApiId: !Ref ExercisesApi
  #           Path: /exercise-01
  #           Method: GET
  #           Auth:
  #             ApiKeyRequired: true

  # Exercise02Table:
  #   Type: AWS::DynamoDB::Table
  #   Properties:
  #     AttributeDefinitions:
  #       - AttributeName: "id"
  #         AttributeType: "N"
  #       - AttributeName: "cidade"
  #         AttributeType: "S"
  #     KeySchema:
  #       - AttributeName: "id"
  #         KeyType: "HASH"
  #     ProvisionedThroughput:
  #       ReadCapacityUnits: "3"
  #       WriteCapacityUnits: "3"
  #     TableName: !Sub "${AWS::StackName}-clientes"
  #     GlobalSecondaryIndexes:
  #       - 
  #         IndexName: "cidade-index"
  #         KeySchema:
  #           -
  #             AttributeName: "cidade"
  #             KeyType: "HASH"
  #         Projection:
  #           ProjectionType: "ALL"
  #         ProvisionedThroughput:
  #           ReadCapacityUnits: "3"
  #           WriteCapacityUnits: "3"

  BitlyUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub '${AWS::StackName}-userPool'
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
      AutoVerifiedAttributes:
        - email
      EmailConfiguration:
        EmailSendingAccount: COGNITO_DEFAULT
      UsernameConfiguration:
        CaseSensitive: false
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Name: verified_email
            Priority: 1
      Policies:
        PasswordPolicy:
          MinimumLength: 12
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true
          TemporaryPasswordValidityDays: 1
      Schema:
        - Name: name
          AttributeDataType: String
          Mutable: true
          Required: true
        - Name: 'family_name'
          AttributeDataType: String
          Mutable: true
          Required: true
        - Name: 'birthdate'
          AttributeDataType: String
          Required: true
          Mutable: true
        - Name: email
          AttributeDataType: String
          Mutable: false
          Required: true

  BitlyFreeUserGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      GroupName: free_account
      Precedence: 1
      UserPoolId: !Ref BitlyUserPool

  BitlyPremiumUserGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      GroupName: premium_account
      Precedence: 2
      UserPoolId: !Ref BitlyUserPool

  BitlyUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub '${AWS::StackName}-userPoolClient'
      GenerateSecret: false
      UserPoolId: !Ref BitlyUserPool
      AllowedOAuthFlowsUserPoolClient: true
      CallbackURLs: [http://localhost:3000]
      AllowedOAuthFlows: [implicit, code]
      AllowedOAuthScopes: [email, openid]
      SupportedIdentityProviders: [COGNITO]

  BitlyUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      UserPoolId: !Ref BitlyUserPool
      Domain: !Ref AWS::StackName

  BitlyApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: prod
      Auth:
        DefaultAuthorizer: CognitoAuthorizer
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !GetAtt BitlyUserPool.Arn  

  FunctionBitly:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: function-bitly
      CodeUri: ./05
      Handler: app.lambdaHandler
      Runtime: nodejs12.x
      Events:
        BitlyApi:
          Type: Api
          Properties:
            RestApiId: !Ref BitlyApi
            Path: /exercise-05
            Method: GET
            Auth:
              ApiKeyRequired: true

Outputs:
  # Exercise01Function:
  #   Value: !GetAtt Exercise01Function.Arn
  # Exercise02Table:
  #   Value: !Ref Exercise02Table
  BitlyAuthURL:
    Value: !Sub 'https://${BitlyUserPoolDomain}.auth.${AWS::Region}.amazoncognito.com/login?client_id=${BitlyUserPoolClient}&response_type=token&redirect_uri=http://localhost:3000'