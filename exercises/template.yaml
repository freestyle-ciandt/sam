AWSTemplateFormatVersion: "2010-09-09"
Transform: "AWS::Serverless-2016-10-31"

Description: Template básico para você resolver seus exercícios

Resources:
  ExercisesApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Auth:
        ApiKeyRequired: true
        UsagePlan:
          CreateUsagePlan: PER_API
          Description: Usage plan para API Mando Rafael e Neviton
          Quota:
            Limit: 5000
            Period: MONTH
          Tags:
            - Key: Name
              Value: Exercise01ApiUsagePlan

  Exercise01Function:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: nodejs12.x
      Events:
        Exercise01Api:
          Type: Api
          Properties:
            RestApiId: !Ref ExercisesApi
            Path: /exercise-01
            Method: GET
            Auth:
              ApiKeyRequired: true
      CodeUri: ./01
      Handler: Exercise-01-function.handler

  Exercise02Function:
    Type: AWS::Serverless::Function
    Properties:
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref Exercise02DynamoDBTable
      Runtime: nodejs12.x
      Events:
        Exercise02ApiId:
          Type: Api
          Properties:
            RestApiId: !Ref ExercisesApi
            Path: /exercise-02/{id}
            Method: GET
            Auth:
              ApiKeyRequired: true
        Exercise02ApiCidade:
          Type: Api
          Properties:
            RestApiId: !Ref ExercisesApi
            Path: /exercise-02/cidade/{cidade}
            Method: GET
            Auth:
              ApiKeyRequired: true              
      CodeUri: ./02
      Handler: Exercise-02-function.handler

  Exercise02DynamoDBTable: 
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions: 
        - 
          AttributeName: "id"
          AttributeType: "N"
        - 
          AttributeName: "cidade"
          AttributeType: "S"
      KeySchema: 
        - 
          AttributeName: "id"
          KeyType: "HASH"     
      ProvisionedThroughput: 
        ReadCapacityUnits: "3"
        WriteCapacityUnits: "3"
      TableName: !Sub ${AWS::StackName}-mrn-clientes
      GlobalSecondaryIndexes: 
        - 
          IndexName: "cidade-index"
          KeySchema: 
            - 
              AttributeName: "cidade"
              KeyType: "HASH"
          Projection:
            ProjectionType: "ALL"
          ProvisionedThroughput: 
            ReadCapacityUnits: "3"
            WriteCapacityUnits: "3"

  Exercise03DynamoDBTable: 
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions: 
        - 
          AttributeName: "id"
          AttributeType: "S"
          
      KeySchema: 
        - 
          AttributeName: "id"
          KeyType: "HASH"
  
      BillingMode: PAY_PER_REQUEST
      TableName: !Sub ${AWS::StackName}-produtos
  
  Exercise03S3Bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub ${AWS::StackName}-produtos

  Exercise03Function:
    Type: AWS::Serverless::Function
    Properties:
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref Exercise03S3Bucket
        - DynamoDBWritePolicy:
            TableName:  !Ref Exercise03DynamoDBTable
      Environment:
        Variables:
          BUCKET_PRODUTOS: !Ref Exercise03S3Bucket
          TABELA_PRODUTOS: !Ref Exercise03DynamoDBTable
      Runtime: nodejs12.x
      CodeUri: ./03
      Handler: Exercise-03-function.handler
      Events:
        InvocationLevel:
          Type: Schedule
          Properties:
            Schedule: cron(0 6 * * ? *)

Outputs:
  Exercise01Function:
    Description: Saída Exercicio 01
    Value: !Ref Exercise01Function

  BucketName:
    Description: Bucket para produtos.csv
    Value: !Ref Exercise03S3Bucket
  
  LambdaArn:
    Description: Lambda Function ARN
    Value: !GetAtt Exercise03Function.Arn
  
  TableName:
    Description: Products table name
    Value: !Ref Exercise03DynamoDBTable
