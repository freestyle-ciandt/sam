AWSTemplateFormatVersion: "2010-09-09"
Transform: "AWS::Serverless-2016-10-31"

Description: Template dojo dupla Romulo e Henrique

Parameters:
  Domain:
    Description: "Domain for API Gateway API's"
    Type: String
    Default: bitly.com
  HostedZoneId:
    Description: "Hosted Zone Id in which we want to add A record"
    Type: String
    Default: XJGYF3453769GVHJGI6
  CertificateArn:
    Description: "Bitly Certificate ARN"
    Type: String
    Default: 'arn:aws:acm:us-east-1:{AccountId}:certificate/{Id}'

Resources:
  BitlyUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub '${AWS::StackName}-userPool'
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
      AutoVerifiedAttributes:
        - email
      EmailConfiguration:
        EmailSendingAccount: COGNITO_DEFAULT
      UsernameConfiguration:
        CaseSensitive: false
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Name: verified_email
            Priority: 1
      Policies:
        PasswordPolicy:
          MinimumLength: 12
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true
          TemporaryPasswordValidityDays: 1
      Schema:
        - Name: name
          AttributeDataType: String
          Mutable: true
          Required: true
        - Name: 'family_name'
          AttributeDataType: String
          Mutable: true
          Required: true
        - Name: 'birthdate'
          AttributeDataType: String
          Required: true
          Mutable: true
        - Name: email
          AttributeDataType: String
          Mutable: false
          Required: true

  BitlyFreeUserGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      GroupName: free_account
      Precedence: 1
      UserPoolId: !Ref BitlyUserPool

  BitlyPremiumUserGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      GroupName: premium_account
      Precedence: 2
      UserPoolId: !Ref BitlyUserPool

  BitlyUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub '${AWS::StackName}-userPoolClient'
      GenerateSecret: false
      UserPoolId: !Ref BitlyUserPool
      AllowedOAuthFlowsUserPoolClient: true
      CallbackURLs: [http://localhost:3000]
      AllowedOAuthFlows: [implicit, code]
      AllowedOAuthScopes: [email, openid]
      SupportedIdentityProviders: [COGNITO]

  BitlyUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      UserPoolId: !Ref BitlyUserPool
      Domain: !Ref AWS::StackName

  BitlyApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: prod
      Auth:
        DefaultAuthorizer: CognitoAuthorizer
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !GetAtt BitlyUserPool.Arn

  APIMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      BasePath: product
      DomainName: !Ref Domain
      RestApiId: !Ref BitlyApi
      Stage: Prod

  CreateAliasFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: createAliasFunction
      CodeUri: ./05
      Handler: createAliasFunction.lambdaHandler
      Runtime: nodejs12.x
      Events:
        createAliasApi:
          Type: Api
          Properties:
            RestApiId: !Ref BitlyApi
            Path: /shorturl
            Method: POST
      Policies:
        - Statement:
          - Effect: 'Allow'
            Action:
              - 'dynamodb:PutItem'
            Resource:
              - !GetAtt BitlyTable.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref BitlyTable
          
  GetAliasFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: getAliasFunction
      CodeUri: ./05
      Handler: getAliasFunction.lambdaHandler
      Runtime: nodejs12.x
      Events:
        createAliasApi:
          Type: Api
          Properties:
            RestApiId: !Ref BitlyApi
            Path: /{alias}
            Method: GET
            Auth: 
              Authorizer: NONE
      Policies:
        - Statement:
          - Effect: 'Allow'
            Action:
              - 'dynamodb:Query'
            Resource:
              - !GetAtt BitlyTable.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref BitlyTable

  BitlyTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      TableName: !Sub "${AWS::StackName}-aliases"
      AttributeDefinitions:
        - AttributeName: "id"
          AttributeType: "S"
        - AttributeName: "tipo"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "id"
          KeyType: "HASH"
      GlobalSecondaryIndexes:
        - 
          IndexName: "tipo-index"
          KeySchema:
            -
              AttributeName: "tipo"
              KeyType: "HASH"
          Projection:
            ProjectionType: "ALL"

  BitlyCustomDomain:
    Type: AWS::ApiGateway::DomainName
    Properties: 
      DomainName: !Ref Domain
      CertificateArn: !Ref CertificateArn
      EndpointConfiguration:
        Types:
          - REGIONAL
      SecurityPolicy: TLS_1_2
  
  Route53RecordSetGroup:
    Type: AWS::Route53::RecordSet
    Properties:
      Name: !Ref Domain
      Type: A
      HostedZoneId: !Ref HostedZoneId
      AliasTarget:
        DNSName: !GetAtt BitlyCustomDomain.DistributionDomainName
        EvaluateTargetHealth: false
        HostedZoneId: !GetAtt BitlyCustomDomain.DistributionHostedZoneId
  
  BitlyCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Ref Domain
      DomainValidationOptions:
        - DomainName: !Ref Domain
          HostedZoneId: !Ref HostedZoneId
      ValidationMethod: 'DNS'

Outputs:
  BitlyAuthURL:
    Value: !Sub 'https://${BitlyUserPoolDomain}.auth.${AWS::Region}.amazoncognito.com/login?client_id=${BitlyUserPoolClient}&response_type=token&redirect_uri=http://localhost:3000'
  CertificateArn:
    Description: "Bitly Certificate ARN"
    Value: !Ref BitlyCertificate